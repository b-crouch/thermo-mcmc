import numpy as np
import scipy.interpolate
import matplotlib.pyplot as plt
from abc import ABC, abstractmethod

class LogLikelihoodModel(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def gen_quantity(self, omega):
        """
        Subclass-specific method to generate target quantity (DOS, Cv curve, etc.)
        """
        pass
        
    def gen_prediction(self, omega, x):
        """
        Generate predictions at x-values `x` using parameter set `omega`
        Params:
            omega (np.array): Array of parameter value assignments; should follow the same order as the listing of parameters in self.hessian_parameters
            x (np.array): Array of x values at which experimental data was recorded
        Return:
            predictions (np.array): Predicted experimental quantity evaluated at each x value in `x`
        """
        pred_x, pred_y = self.gen_quantity(omega)
        
        # Fit spline to learned quantity so predictions can be made at input `x` values
        spline_fit = scipy.interpolate.make_smoothing_spline(pred_x, pred_y)
        predictions = spline_fit(x)
        return predictions
        
    def gen_log_likelihood(self, omega, x, y):
        """
        Generate log-likelihood for parameter set `omega` given observed data (`x`, `y`)
        Params:
            omega (np.array): Array of parameter value assignments; assume that likelihood SD parameter is stored at index -1
            x (np.array): Array of frequency values at which experimental data was recorded
            y (np.array): Ground truth `y` values for each frequency in `x` 
        Return:
            log_lik (float): Log-likelihood of parameter set `omega`
        """
        # Assume Gaussian likelihood with SD set by the learned parameter `sigma`
        # Order of parameters in `omega` must match order of Hessian parameters in reconstruction
        sigma = omega[-1]
        hessian_params = omega[:-1]
        y_hat = self.gen_prediction(hessian_params, x)
        log_lik = np.sum(-0.5*np.log(2*np.pi*sigma**2) - 0.5*((y-y_hat)/sigma)**2)
        return log_lik
    
    def plot(self, omega, x_label, y_label, label="", xlim=None, c="tab:blue"):
        """
        Plot the predicted quantity generated by the parameter set `omega`
        """
        x, y = self.gen_quantity(omega)
        plt.plot(x, y, label=label, c=c)
        plt.xlabel(x_label)
        plt.ylabel(y_label)
        if xlim is not None:
            plt.xlim(*xlim);